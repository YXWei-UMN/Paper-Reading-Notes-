1."a" is a pointer which indicates the address of this string. 
  'a' will be regarded as a integer to cal
  so 		if (str[1]=='a') is right 
  while 	if (str[1]=="a") is wrong
  ps: if(str=="asd") is right, because of class string's overloaded operator ==.

2.char a1[] != char* a2 (a1 is a const ptr while a2 is variable. a1 indicates changeable string while a2 indicates constant string)

//main.cpp
int a=0;    //global initialized area
char *p1;   //global non-initialized area
main()
{
   int b;//stack
   char s[10]="abc";   //stack,both s and the area "abc" contained. s indicate that area. Cause it is in stack, s[i] can be modified (i.e. s[1]='x'). But s is not a variable or it can be treated as a const ptr(array ptr), and can only be initialized once (i.e. cannot s="fgh"/s[10]="fgh").
   char *p2;         //stack
   char *p3="123456";   //p3 is in stack, indicating a sequence of char stored in const string area. So p3 is a variable and can indicate other string(i.e. p3=s) But cannot modify *p3(i.e. *(p3+1)='i' / p3[1]='i').
//actually, when you define char* a="123", compiler will warn "deprecated conversion from string constant to char*", in which char* may change constant string.  
   strcpy(p1,"123456");   //123456\0 is in const string area, may be the same address of which p3 indicates.
}

3.Iterator seems to be a pointer(actually it is a object, with overload function like '++'.So it can be treated as a pointer).
//main.cpp
vector.push_back(obj_1);
iterator=vector.begin();
iterator->value=new_value;
cout<<obj_1.value<<endl; //print old_value
cout<<list[0].value<<endl;  // print new_value

It seems that, STL container have another separate ram space and independent with the original obj, so when modify the value which pointed by iterator, the value of original obj is not changed.


4.Vector also needs to allocate memory
//code 1
vector<int> s;
s[1]=1;//wrong, s[1] is an invalid space
//code 2
vector<int> s(10,0);
s[9]=1;//right, it allocates 10*sizeof(int) for s, and set initial value = 0;

5.ifstream conflicts with ofstream
According to experiments, when you need to both write and read from one file, ofstream and ifstream will confilct with each other causing unknown problem. Using fstream with (ios::in | ios::out) flag can solve this. 






