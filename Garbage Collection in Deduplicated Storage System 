垃圾回收可以分为两阶段：
第一阶段是标记可回收的数据块，称为标记阶段；
第二阶段是回收数据块，称为回收阶段。回收阶段的设计与数据组织格式有关，比如大多数去重系统使用container组织数据，它们就需要一个合并稀疏容器的操作来回收空间。

关于回收阶段的讨论目前还不多。现在的相关论文讨论的问题实际上都属于第一阶段，如何能高效地判断一个数据块不再被任何备份引用？

目前的这些工作可以分为两大类，包括在线和离线。
离线方式指的是所有垃圾回收的操作都在系统空闲时（或者专门安排停机维护）进行；
在线方式则会在系统运行时（备份过程中）就收集元数据，减轻垃圾回收的负担。


一、 引用计数法[1]
在指纹索引中增加一列“引用计数”。当一次备份引用了某个数据块，就将其引用计数增1；当一次备份被删除，所有被其引用的数据块的引用计数减1。当计数为0时，表明该数据块可以被回收。在垃圾回收时，直接查询引用计数为0数据块，回收。
 
这种方法的优点是非常简单，容易理解。然而，它增加了索引的开销；因为索引无法放在内存中，每次引用一个数据块都要更新磁盘上的引用计数，如果可以按顺序批量处理就还不成问题，但有些索引（比如DDFS）的访问是完全随机的；可靠性差，一旦出现错误（比如硬件错误），很难发现；出错后难以恢复，恢复计数需要遍历系统中所有的备份元数据（recipe），代价昂贵。


二、扫描标记法[2,3]
扫描标记法是完全离线的。垃圾回收时扫描所有recipe，记录下所有出现过的指纹，而那些只存在于指纹索引中的指纹（数据块）是可以被回收的。这种方法需要扫描一遍recipes，一遍指纹索引。
 
首先扫描recipe是非常耗时的，一个压缩率20倍的1PB存储系统（块长8KB，指纹20B），recipe大约可以达到50TB。其次，标记几乎需要将整个索引放到内存中，这几乎是不可能的。一些分区的索引方案（比如Extreme Binning）可以缓解内存问题，不过期间要多次读取索引分区，性能受损。


三、 Bloom Filter[3]
扫描标记法消耗太多内存，可以用bloom filter减少内存开销。bloom filter是一个bit array，并需要准备n个不同的哈希函数。插入一个指纹时，用n个哈希函数计算出n个位置，并将bit array上对应bit标记为1；查询指纹时，计算出n个位置，若n个位置不全为1，说明指纹不存在，若全为1，则很可能存在。构造bloom filter需要扫描所有recipe，然而遍历指纹索引找出哪些指纹不在bloom filter中。
 
bloom filter存在false positive（全为1，但是并不存在）的问题。为了保证98%以上的准确性，每个指纹大约需要1个字节，内存开销是方法2的1/20。false positive会造成少量的无用数据块不能被回收，在大多数场景下不是问题。[3]提出的场景，sanitization，则不允许有false positive。

4. bit vector[3]


